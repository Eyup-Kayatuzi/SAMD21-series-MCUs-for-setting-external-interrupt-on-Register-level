
08_Ext_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000524  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000042c  20000000  00000524  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  2000042c  00000950  0002042c  2**2
                  ALLOC
  3 .stack        00002004  2000046c  00000990  0002042c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002042c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020454  2**0
                  CONTENTS, READONLY
  6 .debug_info   00007753  00000000  00000000  000204ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b1  00000000  00000000  00027c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000c8  00000000  00000000  000283b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000000b8  00000000  00000000  00028479  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000068  00000000  00000000  00028531  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00011df9  00000000  00000000  00028599  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001c8c  00000000  00000000  0003a392  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00072312  00000000  00000000  0003c01e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000002b8  00000000  00000000  000ae330  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	70 24 00 20 bd 01 00 00 b9 01 00 00 b9 01 00 00     p$. ............
	...
  2c:	b9 01 00 00 00 00 00 00 00 00 00 00 b9 01 00 00     ................
  3c:	b9 01 00 00 b9 01 00 00 b9 01 00 00 b9 01 00 00     ................
  4c:	b9 01 00 00 1d 03 00 00 b9 01 00 00 b9 01 00 00     ................
  5c:	b9 01 00 00 b9 01 00 00 b9 01 00 00 b9 01 00 00     ................
  6c:	b9 01 00 00 b9 01 00 00 b9 01 00 00 b9 01 00 00     ................
  7c:	b9 01 00 00 b9 01 00 00 b9 01 00 00 b9 01 00 00     ................
  8c:	b9 01 00 00 b9 01 00 00 b9 01 00 00 b9 01 00 00     ................
  9c:	b9 01 00 00 b9 01 00 00 b9 01 00 00 b9 01 00 00     ................
  ac:	b9 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	2000042c 	.word	0x2000042c
  d4:	00000000 	.word	0x00000000
  d8:	00000524 	.word	0x00000524

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000430 	.word	0x20000430
 108:	00000524 	.word	0x00000524
 10c:	00000524 	.word	0x00000524
 110:	00000000 	.word	0x00000000

00000114 <AppInit>:
//////////////////////////////////////////////////////////////////////////
#include "app.h"
#include "clock.h"

void AppInit(void)
{
 114:	b510      	push	{r4, lr}
	ClocksInit();
 116:	4b04      	ldr	r3, [pc, #16]	; (128 <AppInit+0x14>)
 118:	4798      	blx	r3
	
	// Assign LED0 as OUTPUT
	REG_PORT_DIR0 = LED0_PIN_MASK;
 11a:	2380      	movs	r3, #128	; 0x80
 11c:	029b      	lsls	r3, r3, #10
 11e:	4a03      	ldr	r2, [pc, #12]	; (12c <AppInit+0x18>)
 120:	6013      	str	r3, [r2, #0]
	// Set LED0 OFF
	REG_PORT_OUTCLR0 = LED0_PIN_MASK;
 122:	4a03      	ldr	r2, [pc, #12]	; (130 <AppInit+0x1c>)
 124:	6013      	str	r3, [r2, #0]
	

} // AppInit()
 126:	bd10      	pop	{r4, pc}
 128:	00000135 	.word	0x00000135
 12c:	41004400 	.word	0x41004400
 130:	41004414 	.word	0x41004414

00000134 <ClocksInit>:
#include "clock.h"

void ClocksInit(void)
{
	
	SYSCTRL->OSC8M.bit.PRESC = 0x00;  // divide by 1 
 134:	4b17      	ldr	r3, [pc, #92]	; (194 <ClocksInit+0x60>)
 136:	6a1a      	ldr	r2, [r3, #32]
 138:	4917      	ldr	r1, [pc, #92]	; (198 <ClocksInit+0x64>)
 13a:	400a      	ands	r2, r1
 13c:	621a      	str	r2, [r3, #32]
	SYSCTRL->OSC8M.bit.ENABLE = 1;
 13e:	6a1a      	ldr	r2, [r3, #32]
 140:	2102      	movs	r1, #2
 142:	430a      	orrs	r2, r1
 144:	621a      	str	r2, [r3, #32]
	
	
	GCLK->GENDIV.reg = 0x00000000; //*
 146:	4b15      	ldr	r3, [pc, #84]	; (19c <ClocksInit+0x68>)
 148:	2200      	movs	r2, #0
 14a:	609a      	str	r2, [r3, #8]
	
	GCLK->GENCTRL.bit.SRC = 0x06; //* for OSC8M
 14c:	685a      	ldr	r2, [r3, #4]
 14e:	4914      	ldr	r1, [pc, #80]	; (1a0 <ClocksInit+0x6c>)
 150:	4011      	ands	r1, r2
 152:	22c0      	movs	r2, #192	; 0xc0
 154:	00d2      	lsls	r2, r2, #3
 156:	430a      	orrs	r2, r1
 158:	605a      	str	r2, [r3, #4]
	GCLK->GENCTRL.bit.DIVSEL = 0; //*
 15a:	685a      	ldr	r2, [r3, #4]
 15c:	4911      	ldr	r1, [pc, #68]	; (1a4 <ClocksInit+0x70>)
 15e:	400a      	ands	r2, r1
 160:	605a      	str	r2, [r3, #4]
	GCLK->GENCTRL.bit.ID = 0x0; // * The Generic Clock Generator will be selected as the source of the generic clock by the ID bit group
 162:	685a      	ldr	r2, [r3, #4]
 164:	210f      	movs	r1, #15
 166:	438a      	bics	r2, r1
 168:	605a      	str	r2, [r3, #4]
	GCLK->GENCTRL.bit.GENEN = 1; //*
 16a:	6859      	ldr	r1, [r3, #4]
 16c:	2280      	movs	r2, #128	; 0x80
 16e:	0252      	lsls	r2, r2, #9
 170:	430a      	orrs	r2, r1
 172:	605a      	str	r2, [r3, #4]
	
	//////////////////////////
	
	GCLK->CLKCTRL.bit.ID = 0x05; //* for eic peripheral 
 174:	885a      	ldrh	r2, [r3, #2]
 176:	213f      	movs	r1, #63	; 0x3f
 178:	438a      	bics	r2, r1
 17a:	2105      	movs	r1, #5
 17c:	430a      	orrs	r2, r1
 17e:	805a      	strh	r2, [r3, #2]
	GCLK->CLKCTRL.bit.GEN = 0x0; //*
 180:	885a      	ldrh	r2, [r3, #2]
 182:	4909      	ldr	r1, [pc, #36]	; (1a8 <ClocksInit+0x74>)
 184:	400a      	ands	r2, r1
 186:	805a      	strh	r2, [r3, #2]
	GCLK->CLKCTRL.bit.CLKEN = 1; //* 
 188:	8859      	ldrh	r1, [r3, #2]
 18a:	2280      	movs	r2, #128	; 0x80
 18c:	01d2      	lsls	r2, r2, #7
 18e:	430a      	orrs	r2, r1
 190:	805a      	strh	r2, [r3, #2]
	
 192:	4770      	bx	lr
 194:	40000800 	.word	0x40000800
 198:	fffffcff 	.word	0xfffffcff
 19c:	40000c00 	.word	0x40000c00
 1a0:	ffffe0ff 	.word	0xffffe0ff
 1a4:	ffefffff 	.word	0xffefffff
 1a8:	fffff0ff 	.word	0xfffff0ff

000001ac <delay_n_cycles>:
#include "delay.h"


void delay_n_cycles(unsigned long n)
{
	__asm (
 1ac:	f3bf 8f5f 	dmb	sy
 1b0:	3801      	subs	r0, #1
 1b2:	2800      	cmp	r0, #0
 1b4:	d1fa      	bne.n	1ac <delay_n_cycles>
	"loop: DMB	\n"
	"SUB r0, r0, #1 \n"
	"CMP r0, #0  \n"
	"BNE loop         "
	);
} // delay_n_cycles()
 1b6:	4770      	bx	lr

000001b8 <Dummy_Handler>:
 1b8:	e7fe      	b.n	1b8 <Dummy_Handler>
	...

000001bc <Reset_Handler>:
 1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1be:	4a2a      	ldr	r2, [pc, #168]	; (268 <Reset_Handler+0xac>)
 1c0:	4b2a      	ldr	r3, [pc, #168]	; (26c <Reset_Handler+0xb0>)
 1c2:	429a      	cmp	r2, r3
 1c4:	d011      	beq.n	1ea <Reset_Handler+0x2e>
 1c6:	001a      	movs	r2, r3
 1c8:	4b29      	ldr	r3, [pc, #164]	; (270 <Reset_Handler+0xb4>)
 1ca:	429a      	cmp	r2, r3
 1cc:	d20d      	bcs.n	1ea <Reset_Handler+0x2e>
 1ce:	4a29      	ldr	r2, [pc, #164]	; (274 <Reset_Handler+0xb8>)
 1d0:	3303      	adds	r3, #3
 1d2:	1a9b      	subs	r3, r3, r2
 1d4:	089b      	lsrs	r3, r3, #2
 1d6:	3301      	adds	r3, #1
 1d8:	009b      	lsls	r3, r3, #2
 1da:	2200      	movs	r2, #0
 1dc:	4823      	ldr	r0, [pc, #140]	; (26c <Reset_Handler+0xb0>)
 1de:	4922      	ldr	r1, [pc, #136]	; (268 <Reset_Handler+0xac>)
 1e0:	588c      	ldr	r4, [r1, r2]
 1e2:	5084      	str	r4, [r0, r2]
 1e4:	3204      	adds	r2, #4
 1e6:	429a      	cmp	r2, r3
 1e8:	d1fa      	bne.n	1e0 <Reset_Handler+0x24>
 1ea:	4a23      	ldr	r2, [pc, #140]	; (278 <Reset_Handler+0xbc>)
 1ec:	4b23      	ldr	r3, [pc, #140]	; (27c <Reset_Handler+0xc0>)
 1ee:	429a      	cmp	r2, r3
 1f0:	d20a      	bcs.n	208 <Reset_Handler+0x4c>
 1f2:	43d3      	mvns	r3, r2
 1f4:	4921      	ldr	r1, [pc, #132]	; (27c <Reset_Handler+0xc0>)
 1f6:	185b      	adds	r3, r3, r1
 1f8:	2103      	movs	r1, #3
 1fa:	438b      	bics	r3, r1
 1fc:	3304      	adds	r3, #4
 1fe:	189b      	adds	r3, r3, r2
 200:	2100      	movs	r1, #0
 202:	c202      	stmia	r2!, {r1}
 204:	4293      	cmp	r3, r2
 206:	d1fc      	bne.n	202 <Reset_Handler+0x46>
 208:	4a1d      	ldr	r2, [pc, #116]	; (280 <Reset_Handler+0xc4>)
 20a:	21ff      	movs	r1, #255	; 0xff
 20c:	4b1d      	ldr	r3, [pc, #116]	; (284 <Reset_Handler+0xc8>)
 20e:	438b      	bics	r3, r1
 210:	6093      	str	r3, [r2, #8]
 212:	39fd      	subs	r1, #253	; 0xfd
 214:	2390      	movs	r3, #144	; 0x90
 216:	005b      	lsls	r3, r3, #1
 218:	4a1b      	ldr	r2, [pc, #108]	; (288 <Reset_Handler+0xcc>)
 21a:	50d1      	str	r1, [r2, r3]
 21c:	4a1b      	ldr	r2, [pc, #108]	; (28c <Reset_Handler+0xd0>)
 21e:	78d3      	ldrb	r3, [r2, #3]
 220:	2503      	movs	r5, #3
 222:	43ab      	bics	r3, r5
 224:	2402      	movs	r4, #2
 226:	4323      	orrs	r3, r4
 228:	70d3      	strb	r3, [r2, #3]
 22a:	78d3      	ldrb	r3, [r2, #3]
 22c:	270c      	movs	r7, #12
 22e:	43bb      	bics	r3, r7
 230:	2608      	movs	r6, #8
 232:	4333      	orrs	r3, r6
 234:	70d3      	strb	r3, [r2, #3]
 236:	4b16      	ldr	r3, [pc, #88]	; (290 <Reset_Handler+0xd4>)
 238:	7b98      	ldrb	r0, [r3, #14]
 23a:	2230      	movs	r2, #48	; 0x30
 23c:	4390      	bics	r0, r2
 23e:	2220      	movs	r2, #32
 240:	4310      	orrs	r0, r2
 242:	7398      	strb	r0, [r3, #14]
 244:	7b99      	ldrb	r1, [r3, #14]
 246:	43b9      	bics	r1, r7
 248:	4331      	orrs	r1, r6
 24a:	7399      	strb	r1, [r3, #14]
 24c:	7b9a      	ldrb	r2, [r3, #14]
 24e:	43aa      	bics	r2, r5
 250:	4322      	orrs	r2, r4
 252:	739a      	strb	r2, [r3, #14]
 254:	4a0f      	ldr	r2, [pc, #60]	; (294 <Reset_Handler+0xd8>)
 256:	6853      	ldr	r3, [r2, #4]
 258:	2180      	movs	r1, #128	; 0x80
 25a:	430b      	orrs	r3, r1
 25c:	6053      	str	r3, [r2, #4]
 25e:	4b0e      	ldr	r3, [pc, #56]	; (298 <Reset_Handler+0xdc>)
 260:	4798      	blx	r3
 262:	4b0e      	ldr	r3, [pc, #56]	; (29c <Reset_Handler+0xe0>)
 264:	4798      	blx	r3
 266:	e7fe      	b.n	266 <Reset_Handler+0xaa>
 268:	00000524 	.word	0x00000524
 26c:	20000000 	.word	0x20000000
 270:	2000042c 	.word	0x2000042c
 274:	20000004 	.word	0x20000004
 278:	2000042c 	.word	0x2000042c
 27c:	2000046c 	.word	0x2000046c
 280:	e000ed00 	.word	0xe000ed00
 284:	00000000 	.word	0x00000000
 288:	41007000 	.word	0x41007000
 28c:	41005000 	.word	0x41005000
 290:	41004800 	.word	0x41004800
 294:	41004000 	.word	0x41004000
 298:	0000035d 	.word	0x0000035d
 29c:	000002a1 	.word	0x000002a1

000002a0 <main>:
// Function Prototypes
//////////////////////////////////////////////////////////////////////////
void ClocksInit(void);	// Configure Clock, Wait States and synch, bus clocks for 48MHz operation

int main(void)
{
 2a0:	b510      	push	{r4, lr}
	AppInit();
 2a2:	4b19      	ldr	r3, [pc, #100]	; (308 <main+0x68>)
 2a4:	4798      	blx	r3
	PORT->Group[LED0_PORT].PINCFG[LED0_PIN_NUMBER].bit.DRVSTR = 1;
 2a6:	4b19      	ldr	r3, [pc, #100]	; (30c <main+0x6c>)
 2a8:	2151      	movs	r1, #81	; 0x51
 2aa:	5c5a      	ldrb	r2, [r3, r1]
 2ac:	2040      	movs	r0, #64	; 0x40
 2ae:	4302      	orrs	r2, r0
 2b0:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].PINCFG[7].bit.PMUXEN = 1;
 2b2:	390a      	subs	r1, #10
 2b4:	5c5a      	ldrb	r2, [r3, r1]
 2b6:	2001      	movs	r0, #1
 2b8:	4302      	orrs	r2, r0
 2ba:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].PMUX[3].bit.PMUXO = 0x0;
 2bc:	3914      	subs	r1, #20
 2be:	5c58      	ldrb	r0, [r3, r1]
 2c0:	220f      	movs	r2, #15
 2c2:	4002      	ands	r2, r0
 2c4:	545a      	strb	r2, [r3, r1]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 2c6:	2210      	movs	r2, #16
 2c8:	4b11      	ldr	r3, [pc, #68]	; (310 <main+0x70>)
 2ca:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(EIC_IRQn); // eic peripheral is enabled
	EIC->CONFIG[0].bit.FILTEN7 = 1;
 2cc:	4b11      	ldr	r3, [pc, #68]	; (314 <main+0x74>)
 2ce:	6999      	ldr	r1, [r3, #24]
 2d0:	2280      	movs	r2, #128	; 0x80
 2d2:	0612      	lsls	r2, r2, #24
 2d4:	430a      	orrs	r2, r1
 2d6:	619a      	str	r2, [r3, #24]
	EIC->CONFIG[0].bit.SENSE7 = 0x2;
 2d8:	699a      	ldr	r2, [r3, #24]
 2da:	490f      	ldr	r1, [pc, #60]	; (318 <main+0x78>)
 2dc:	4011      	ands	r1, r2
 2de:	2280      	movs	r2, #128	; 0x80
 2e0:	0592      	lsls	r2, r2, #22
 2e2:	430a      	orrs	r2, r1
 2e4:	619a      	str	r2, [r3, #24]
	EIC->INTENSET.bit.EXTINT7 = 1; // The external interrupt x is enabled. (pa7 for now)
 2e6:	68da      	ldr	r2, [r3, #12]
 2e8:	2180      	movs	r1, #128	; 0x80
 2ea:	430a      	orrs	r2, r1
 2ec:	60da      	str	r2, [r3, #12]
	EIC->CTRL.bit.ENABLE = 1; // eic is enabled.
 2ee:	781a      	ldrb	r2, [r3, #0]
 2f0:	2102      	movs	r1, #2
 2f2:	430a      	orrs	r2, r1
 2f4:	701a      	strb	r2, [r3, #0]
	while ((EIC->CTRL.bit.SWRST == 1) && (EIC->STATUS.bit.SYNCBUSY == 1))
 2f6:	001a      	movs	r2, r3
 2f8:	7813      	ldrb	r3, [r2, #0]
 2fa:	07db      	lsls	r3, r3, #31
 2fc:	d503      	bpl.n	306 <main+0x66>
 2fe:	7853      	ldrb	r3, [r2, #1]
 300:	09db      	lsrs	r3, r3, #7
 302:	2b01      	cmp	r3, #1
 304:	d0f8      	beq.n	2f8 <main+0x58>
 306:	e7fe      	b.n	306 <main+0x66>
 308:	00000115 	.word	0x00000115
 30c:	41004400 	.word	0x41004400
 310:	e000e100 	.word	0xe000e100
 314:	40001800 	.word	0x40001800
 318:	8fffffff 	.word	0x8fffffff

0000031c <EIC_Handler>:
		
	}
} 

void EIC_Handler(void)
{
 31c:	b510      	push	{r4, lr}
	// if external interrupt detected
	if ( EIC->INTFLAG.bit.EXTINT7 == 1 )
 31e:	4b0a      	ldr	r3, [pc, #40]	; (348 <EIC_Handler+0x2c>)
 320:	691b      	ldr	r3, [r3, #16]
 322:	061b      	lsls	r3, r3, #24
 324:	d400      	bmi.n	328 <EIC_Handler+0xc>
		
		REG_PORT_OUTCLR0 = LED0_PIN_MASK;

		EIC->INTFLAG.bit.EXTINT7 = 1;
	}
}
 326:	bd10      	pop	{r4, pc}
		REG_PORT_OUTSET0 = LED0_PIN_MASK;
 328:	2480      	movs	r4, #128	; 0x80
 32a:	02a4      	lsls	r4, r4, #10
 32c:	4b07      	ldr	r3, [pc, #28]	; (34c <EIC_Handler+0x30>)
 32e:	601c      	str	r4, [r3, #0]
		delay_ms(100);
 330:	4807      	ldr	r0, [pc, #28]	; (350 <EIC_Handler+0x34>)
 332:	4b08      	ldr	r3, [pc, #32]	; (354 <EIC_Handler+0x38>)
 334:	4798      	blx	r3
		REG_PORT_OUTCLR0 = LED0_PIN_MASK;
 336:	4b08      	ldr	r3, [pc, #32]	; (358 <EIC_Handler+0x3c>)
 338:	601c      	str	r4, [r3, #0]
		EIC->INTFLAG.bit.EXTINT7 = 1;
 33a:	4a03      	ldr	r2, [pc, #12]	; (348 <EIC_Handler+0x2c>)
 33c:	6913      	ldr	r3, [r2, #16]
 33e:	2180      	movs	r1, #128	; 0x80
 340:	430b      	orrs	r3, r1
 342:	6113      	str	r3, [r2, #16]
}
 344:	e7ef      	b.n	326 <EIC_Handler+0xa>
 346:	46c0      	nop			; (mov r8, r8)
 348:	40001800 	.word	0x40001800
 34c:	41004418 	.word	0x41004418
 350:	000a7693 	.word	0x000a7693
 354:	000001ad 	.word	0x000001ad
 358:	41004414 	.word	0x41004414

0000035c <__libc_init_array>:
 35c:	b570      	push	{r4, r5, r6, lr}
 35e:	4e0d      	ldr	r6, [pc, #52]	; (394 <__libc_init_array+0x38>)
 360:	4d0d      	ldr	r5, [pc, #52]	; (398 <__libc_init_array+0x3c>)
 362:	2400      	movs	r4, #0
 364:	1bad      	subs	r5, r5, r6
 366:	10ad      	asrs	r5, r5, #2
 368:	d005      	beq.n	376 <__libc_init_array+0x1a>
 36a:	00a3      	lsls	r3, r4, #2
 36c:	58f3      	ldr	r3, [r6, r3]
 36e:	3401      	adds	r4, #1
 370:	4798      	blx	r3
 372:	42a5      	cmp	r5, r4
 374:	d1f9      	bne.n	36a <__libc_init_array+0xe>
 376:	f000 f8c3 	bl	500 <_init>
 37a:	4e08      	ldr	r6, [pc, #32]	; (39c <__libc_init_array+0x40>)
 37c:	4d08      	ldr	r5, [pc, #32]	; (3a0 <__libc_init_array+0x44>)
 37e:	2400      	movs	r4, #0
 380:	1bad      	subs	r5, r5, r6
 382:	10ad      	asrs	r5, r5, #2
 384:	d005      	beq.n	392 <__libc_init_array+0x36>
 386:	00a3      	lsls	r3, r4, #2
 388:	58f3      	ldr	r3, [r6, r3]
 38a:	3401      	adds	r4, #1
 38c:	4798      	blx	r3
 38e:	42a5      	cmp	r5, r4
 390:	d1f9      	bne.n	386 <__libc_init_array+0x2a>
 392:	bd70      	pop	{r4, r5, r6, pc}
 394:	0000050c 	.word	0x0000050c
 398:	0000050c 	.word	0x0000050c
 39c:	0000050c 	.word	0x0000050c
 3a0:	00000514 	.word	0x00000514

000003a4 <register_fini>:
 3a4:	4b03      	ldr	r3, [pc, #12]	; (3b4 <register_fini+0x10>)
 3a6:	b510      	push	{r4, lr}
 3a8:	2b00      	cmp	r3, #0
 3aa:	d002      	beq.n	3b2 <register_fini+0xe>
 3ac:	4802      	ldr	r0, [pc, #8]	; (3b8 <register_fini+0x14>)
 3ae:	f000 f805 	bl	3bc <atexit>
 3b2:	bd10      	pop	{r4, pc}
 3b4:	00000000 	.word	0x00000000
 3b8:	000003cd 	.word	0x000003cd

000003bc <atexit>:
 3bc:	b510      	push	{r4, lr}
 3be:	0001      	movs	r1, r0
 3c0:	2300      	movs	r3, #0
 3c2:	2200      	movs	r2, #0
 3c4:	2000      	movs	r0, #0
 3c6:	f000 f81f 	bl	408 <__register_exitproc>
 3ca:	bd10      	pop	{r4, pc}

000003cc <__libc_fini_array>:
 3cc:	b570      	push	{r4, r5, r6, lr}
 3ce:	4b09      	ldr	r3, [pc, #36]	; (3f4 <__libc_fini_array+0x28>)
 3d0:	4c09      	ldr	r4, [pc, #36]	; (3f8 <__libc_fini_array+0x2c>)
 3d2:	1ae4      	subs	r4, r4, r3
 3d4:	10a4      	asrs	r4, r4, #2
 3d6:	d009      	beq.n	3ec <__libc_fini_array+0x20>
 3d8:	4a08      	ldr	r2, [pc, #32]	; (3fc <__libc_fini_array+0x30>)
 3da:	18a5      	adds	r5, r4, r2
 3dc:	00ad      	lsls	r5, r5, #2
 3de:	18ed      	adds	r5, r5, r3
 3e0:	682b      	ldr	r3, [r5, #0]
 3e2:	3c01      	subs	r4, #1
 3e4:	4798      	blx	r3
 3e6:	3d04      	subs	r5, #4
 3e8:	2c00      	cmp	r4, #0
 3ea:	d1f9      	bne.n	3e0 <__libc_fini_array+0x14>
 3ec:	f000 f892 	bl	514 <_fini>
 3f0:	bd70      	pop	{r4, r5, r6, pc}
 3f2:	46c0      	nop			; (mov r8, r8)
 3f4:	00000520 	.word	0x00000520
 3f8:	00000524 	.word	0x00000524
 3fc:	3fffffff 	.word	0x3fffffff

00000400 <__retarget_lock_acquire_recursive>:
 400:	4770      	bx	lr
 402:	46c0      	nop			; (mov r8, r8)

00000404 <__retarget_lock_release_recursive>:
 404:	4770      	bx	lr
 406:	46c0      	nop			; (mov r8, r8)

00000408 <__register_exitproc>:
 408:	b5f0      	push	{r4, r5, r6, r7, lr}
 40a:	464e      	mov	r6, r9
 40c:	4645      	mov	r5, r8
 40e:	46de      	mov	lr, fp
 410:	4657      	mov	r7, sl
 412:	b5e0      	push	{r5, r6, r7, lr}
 414:	4d36      	ldr	r5, [pc, #216]	; (4f0 <__register_exitproc+0xe8>)
 416:	b083      	sub	sp, #12
 418:	0006      	movs	r6, r0
 41a:	6828      	ldr	r0, [r5, #0]
 41c:	4698      	mov	r8, r3
 41e:	000f      	movs	r7, r1
 420:	4691      	mov	r9, r2
 422:	f7ff ffed 	bl	400 <__retarget_lock_acquire_recursive>
 426:	4b33      	ldr	r3, [pc, #204]	; (4f4 <__register_exitproc+0xec>)
 428:	681c      	ldr	r4, [r3, #0]
 42a:	23a4      	movs	r3, #164	; 0xa4
 42c:	005b      	lsls	r3, r3, #1
 42e:	58e0      	ldr	r0, [r4, r3]
 430:	2800      	cmp	r0, #0
 432:	d052      	beq.n	4da <__register_exitproc+0xd2>
 434:	6843      	ldr	r3, [r0, #4]
 436:	2b1f      	cmp	r3, #31
 438:	dc13      	bgt.n	462 <__register_exitproc+0x5a>
 43a:	1c5a      	adds	r2, r3, #1
 43c:	9201      	str	r2, [sp, #4]
 43e:	2e00      	cmp	r6, #0
 440:	d128      	bne.n	494 <__register_exitproc+0x8c>
 442:	9a01      	ldr	r2, [sp, #4]
 444:	3302      	adds	r3, #2
 446:	009b      	lsls	r3, r3, #2
 448:	6042      	str	r2, [r0, #4]
 44a:	501f      	str	r7, [r3, r0]
 44c:	6828      	ldr	r0, [r5, #0]
 44e:	f7ff ffd9 	bl	404 <__retarget_lock_release_recursive>
 452:	2000      	movs	r0, #0
 454:	b003      	add	sp, #12
 456:	bc3c      	pop	{r2, r3, r4, r5}
 458:	4690      	mov	r8, r2
 45a:	4699      	mov	r9, r3
 45c:	46a2      	mov	sl, r4
 45e:	46ab      	mov	fp, r5
 460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 462:	4b25      	ldr	r3, [pc, #148]	; (4f8 <__register_exitproc+0xf0>)
 464:	2b00      	cmp	r3, #0
 466:	d03d      	beq.n	4e4 <__register_exitproc+0xdc>
 468:	20c8      	movs	r0, #200	; 0xc8
 46a:	0040      	lsls	r0, r0, #1
 46c:	e000      	b.n	470 <__register_exitproc+0x68>
 46e:	bf00      	nop
 470:	2800      	cmp	r0, #0
 472:	d037      	beq.n	4e4 <__register_exitproc+0xdc>
 474:	22a4      	movs	r2, #164	; 0xa4
 476:	2300      	movs	r3, #0
 478:	0052      	lsls	r2, r2, #1
 47a:	58a1      	ldr	r1, [r4, r2]
 47c:	6043      	str	r3, [r0, #4]
 47e:	6001      	str	r1, [r0, #0]
 480:	50a0      	str	r0, [r4, r2]
 482:	3240      	adds	r2, #64	; 0x40
 484:	5083      	str	r3, [r0, r2]
 486:	3204      	adds	r2, #4
 488:	5083      	str	r3, [r0, r2]
 48a:	3301      	adds	r3, #1
 48c:	9301      	str	r3, [sp, #4]
 48e:	2300      	movs	r3, #0
 490:	2e00      	cmp	r6, #0
 492:	d0d6      	beq.n	442 <__register_exitproc+0x3a>
 494:	009a      	lsls	r2, r3, #2
 496:	4692      	mov	sl, r2
 498:	4482      	add	sl, r0
 49a:	464a      	mov	r2, r9
 49c:	2188      	movs	r1, #136	; 0x88
 49e:	4654      	mov	r4, sl
 4a0:	5062      	str	r2, [r4, r1]
 4a2:	22c4      	movs	r2, #196	; 0xc4
 4a4:	0052      	lsls	r2, r2, #1
 4a6:	4691      	mov	r9, r2
 4a8:	4481      	add	r9, r0
 4aa:	464a      	mov	r2, r9
 4ac:	3987      	subs	r1, #135	; 0x87
 4ae:	4099      	lsls	r1, r3
 4b0:	6812      	ldr	r2, [r2, #0]
 4b2:	468b      	mov	fp, r1
 4b4:	430a      	orrs	r2, r1
 4b6:	4694      	mov	ip, r2
 4b8:	464a      	mov	r2, r9
 4ba:	4661      	mov	r1, ip
 4bc:	6011      	str	r1, [r2, #0]
 4be:	2284      	movs	r2, #132	; 0x84
 4c0:	4641      	mov	r1, r8
 4c2:	0052      	lsls	r2, r2, #1
 4c4:	50a1      	str	r1, [r4, r2]
 4c6:	2e02      	cmp	r6, #2
 4c8:	d1bb      	bne.n	442 <__register_exitproc+0x3a>
 4ca:	0002      	movs	r2, r0
 4cc:	465c      	mov	r4, fp
 4ce:	328d      	adds	r2, #141	; 0x8d
 4d0:	32ff      	adds	r2, #255	; 0xff
 4d2:	6811      	ldr	r1, [r2, #0]
 4d4:	430c      	orrs	r4, r1
 4d6:	6014      	str	r4, [r2, #0]
 4d8:	e7b3      	b.n	442 <__register_exitproc+0x3a>
 4da:	0020      	movs	r0, r4
 4dc:	304d      	adds	r0, #77	; 0x4d
 4de:	30ff      	adds	r0, #255	; 0xff
 4e0:	50e0      	str	r0, [r4, r3]
 4e2:	e7a7      	b.n	434 <__register_exitproc+0x2c>
 4e4:	6828      	ldr	r0, [r5, #0]
 4e6:	f7ff ff8d 	bl	404 <__retarget_lock_release_recursive>
 4ea:	2001      	movs	r0, #1
 4ec:	4240      	negs	r0, r0
 4ee:	e7b1      	b.n	454 <__register_exitproc+0x4c>
 4f0:	20000428 	.word	0x20000428
 4f4:	000004fc 	.word	0x000004fc
 4f8:	00000000 	.word	0x00000000

000004fc <_global_impure_ptr>:
 4fc:	20000000                                ... 

00000500 <_init>:
 500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 502:	46c0      	nop			; (mov r8, r8)
 504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 506:	bc08      	pop	{r3}
 508:	469e      	mov	lr, r3
 50a:	4770      	bx	lr

0000050c <__init_array_start>:
 50c:	000003a5 	.word	0x000003a5

00000510 <__frame_dummy_init_array_entry>:
 510:	000000dd                                ....

00000514 <_fini>:
 514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 516:	46c0      	nop			; (mov r8, r8)
 518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 51a:	bc08      	pop	{r3}
 51c:	469e      	mov	lr, r3
 51e:	4770      	bx	lr

00000520 <__fini_array_start>:
 520:	000000b5 	.word	0x000000b5
